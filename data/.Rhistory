summary(basre.maxibi)
basfun.maxibi<-aov(maxibi~(fair*emo*touch*Mabas.fun)+Error(sub/(fair*emo*touch))+(Mabas.fun),agg)
summary(basfun.maxibi)
install.packages("dplyr")
install.packages("tidyr")
install.packages("ggplot2")
"hello world"
x<-5
x+5
x<-fuction(a,b) {a+2}
m1<- c(50.5, 30.5, 120.0)
m2<- c(5,2,10)
data.example1 <- data.frame(m1, m2)
View(data.example1)
View(data.example1)
data.example1$m1
data.example1$id <- c(101,102,103)
view(data.example1)
View(data.example1)
View(data.example1)
data.example1$zerror <- m2/m1
View(data.example1)
str(data.example1)
library(dplyr)
library(tidyr)
library(ggplot2)
r.clinic <- read.table("//home.org.aalto.fi/harjunv1/data/Desktop/r-clinic/r-clinic/r-clinic.R", header=TRUE, quote="\"")
View(r.clinic)
library(lattice)
setwd("//home.org.aalto.fi/harjunv1/data/Desktop/r-clinic/r-clinic")
data.clinic <- rwad.table("data/r-clinic1.csv", headet = T, sep "", dec =",")
data.clinic <- read.table("data/r-clinic1.csv", headet = T, sep "", dec =",")
data.clinic <- read.table("data/r-clinic1.csv", headet = T, sep ",", dec =",")
r.clinic
data.clinic <- read.table("data/r-clinic1.csv", header = T, sep = "", dec = ".")
head(data.clinic)
View(data.clinic)
View(data.clinic)
data.clinic %>% select(matches("time"))
data.clinic.long <-
data.clinic %>%  # use the original data
select(matches("id"), matches("time")) %>%  # Select only id and time vars.
gather("condition", "time", time.a.1:time.b.3)  # wide->long
View(data.clinic.long)
View(data.clinic.long)
data.clinic.long <-
data.clinic.long %>%
mutate(task = ifelse(grepl("1", condition), 1,
ifelse(grepl("2", condition), 2,
ifelse(grepl("3", condition), 3, NA))))
View(data.clinic.long)
View(data.clinic.long)
data.clinic.long <-
data.clinic.long %>%
mutate(cond = ifelse(grepl("a", condition), a,
ifelse(grepl("b", condition), b, NA))))
data.clinic.long <-
read.table("data/r-clinic1.csv", header = T, sep = "", dec = ".") %>%
select(matches("id"), matches("time")) %>%  # Select only id and time vars.
gather("condition", "time", time.a.1:time.b.3) %>%  # wide->long
mutate(task = ifelse(grepl("1", condition), 1,
ifelse(grepl("2", condition), 2,
ifelse(grepl("3", condition), 3, NA)))) %>%  # get the task
mutate(condition = ifelse(grepl("a", condition), "a",
ifelse(grepl("b", condition), "b", NA))) %>%  # condition
select(id,condition,task,time) %>%  # reorder columns
arrange(id,condition,task)
View(data.clinic.long)
View(data.clinic.long)
load("~/rville_demo/rville_demo.Rproj")
download.packages(MASS)
install.packages("MASS")
library(MASS)
data("Boston")
str(Boston)
library(GGally)
library(ggplot2)
explot <- ggpairs(Boston, mapping = aes(), lower = list(combo = wrap("facethist", bins = 20)))
explot
library(GGally)
library(ggplot2)
library(tidyr)
gather(Boston) %>% glimpse
glimpse(Boston)
library(dplyr)
gather(Boston) %>% glimpse
gather(Boston) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
geom_bar(Boston$crim)
ggplot(aes(value)) + geom_bar(Boston$crim)
ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar(Boston$crim)
ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar(Boston$crim)
?ggplot2
geom_histogram(mapping = NULL, data = Boston, stat = "bin",
position = "stack", ..., binwidth = NULL, bins = NULL, na.rm = FALSE,
show.legend = NA, inherit.aes = TRUE)
gather(Boston) %>% glimpse
gather(Boston) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_histogram(mapping = aes(value), data = Boston, stat = "bin", position = "stack")
gather(Boston) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_histogram(mapping = aes(value), data = Boston, stat = "bin", position = "stack")
gather(Boston) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_histogram()
summary(Boston)
pairs(~,data=Boston,
gather(Boston) %>% glimpse
gather(Boston) %>% pairs(~,data=Boston,
gather(Boston) %>% glimpse
gather(Boston) %>% pairs(~ value,data=Boston,
main="Simple Scatterplot Matrix")
pairs(Boston[-4], log = "xy")
pairs(Boston[-4])
gather(Boston) %>% glimpse
gather(Boston) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_point()
explorative_plot <- ggpairs(Boston, mapping = aes(col = chas), lower = list(combo = wrap("facethist", bins = 20)))
explorative_plot
explorative_plot <- ggpairs(Boston, mapping = aes(), lower = list(combo = wrap("facethist", bins = 20)))
explorative_plot
explorative_plot <- ggpairs(Boston[-5], mapping = aes(), lower = list(combo = wrap("facethist", bins = 20)))
explorative_plot
explorative_plot <- ggpairs(Boston[-4], mapping = aes(), lower = list(combo = wrap("facethist", bins = 40)))
explorative_plot
?ggpairs
explorative_plot <- ggpairs(Boston[-4], mapping = aes(), lower = list(combo = wrap("facethist", bins = 10)))
explorative_plot
exp_plot <- pairs(Boston[-4], lower.panel=panel.smooth, upper.panel=panel.cor)
panel.hist <- function(x, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col="cyan", ...)
}
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex * r)
}
exp_plot <- pairs(Boston[-4])
exp_plot <- pairs(Boston[1:6])
exp_plot <- pairs(Boston[-4, 1:6])
exp_plot <- pairs(Boston[1:3])
install.packages("corrplot")
library(corrplot)
corrplot(Boston[-4], type="upper", order="hclust",
p.mat = res2$P, sig.level = 0.01, insig = "blank")
type(boston)
class(boston)
class(Boston)
bos <- cor(Boston)
round(res, 2)
round(bos, 2)
corrplot(bos, type="upper", order="hclust",
p.mat = res2$P, sig.level = 0.01, insig = "blank")
corrplot(bos, type="upper", order="hclust",
p.mat = bos, sig.level = 0.01, insig = "blank")
corrplot(bos, type="upper", order="hclust",
p.mat = bos, sig.level = 0.05, insig = "blank")
corrplot(bos, type="upper", order="hclust",
p.mat = bos)
bostonZ <- scale(Boston)
summary(bostonZ)
class(boston_scaled)
class(bostonZ)
bostonZ <- as.data.frame(bostonZ)
scaled_crim <- bostonZ$crim
summary(scaled_crim)
bins <- quantile(scaled_crim)
bins
crime <- cut(scaled_crim, breaks = bins, include.lowest = TRUE, label = c("low", "med_low", "med_high", "high"))
boston_scaled <- select(bostonZ, -crim)
boston_scaled <- data.frame(bostonZ, crime)
str(bostonZ)
crime
lda.fit <- lda(crime ~ ., data = train)
library(MASS)
lda.fit <- lda(crime ~ ., data = train)
n <- nrow(bostonZ)
ind <- sample(n,  size = n * 0.8)
train <- bostonZ[ind,]
test <- bostonZ[-ind,]
correct_classes <- test$crime
test <- select(test, -crime)
test <- select(test, crime)
test <- dplyr::select(test, -crime)
head(test)
scaled_crim <- bostonZ$crim
bins <- quantile(scaled_crim)
crime <- cut(scaled_crim, breaks = bins, include.lowest = TRUE, label = c("low", "med_low", "med_high", "high"))
boston_scaled <- select(bostonZ, -crim)
boston_scaled <- dplyr::select(bostonZ, -crim)
boston_scaled <- data.frame(bostonZ, crime)
n <- nrow(bostonZ)
ind <- sample(n,  size = n * 0.8)
train <- bostonZ[ind,]
test <- bostonZ[-ind,]
correct_classes <- test$crime
test <- dplyr::select(test, -crime)
str(test)
bostonZ <- dplyr::select(bostonZ, -crim)
bostonZ <- data.frame(bostonZ, crime)
n <- nrow(bostonZ)
ind <- sample(n,  size = n * 0.8)
train <- bostonZ[ind,]
test <- bostonZ[-ind,]
correct_classes <- test$crime
test <- dplyr::select(test, -crime)
library(MASS)
lda.fit <- lda(crime ~ ., data = train)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(train$crime)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 1)
lda.pred <- predict(lda.fit, newdata = test)
table(correct = correct_classes, predicted = lda.pred$class)
library(MASS)
data('Boston')
dist_eu <- dist(Boston)
summary(dist_eu)
dist_man <- dist(Boston, method = "manhattan")
summary(dist_man)
km <-kmeans(dist_eu, centers = 2)
pairs(Boston, col = km$cluster)
pairs(Boston, col = km$cluster, lowertriangle()="blank")
?pairs
pairs(Boston, col = km$cluster, lower.panel = panel.smooth, upper.panel = panel.cor)
pairs(Boston, col = km$cluster, lower.panel = panel.smooth)
pairs(Boston, col = km$cluster)
plot(lda.fit, dimen = 4, col = classes, pch = classes)
plot(lda.fit, dimen = 3, col = classes, pch = classes)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
km <-kmeans(dist_eu, centers = 4)
pairs(Boston, col = km$cluster)
BostonScaled <- scale(Boston)
dist_eu <- dist(BostonScaled)
summary(dist_eu)
km <-kmeans(dist_eu, centers = 4)
pairs(BostonScaled, col = km$cluster)
km
twcss <- sapply(1:k_max, function(k){kmeans(dist_eu, k)$tot.withinss})
k_max <- 10
twcss <- sapply(1:k_max, function(k){kmeans(dist_eu, k)$tot.withinss})
plot(1:k_max, twcss, type='b')
km <-kmeans(dist_eu, centers = 2)
pairs(Boston, col = km$cluster)
km <-kmeans(dist_eu, centers = 4)
pairs(Boston, col = km$cluster)
km <-kmeans(dist_eu, centers = 3)
pairs(Boston, col = km$cluster)
km <-kmeans(dist_eu, centers = 6)
pairs(Boston, col = km$cluster)
km <-kmeans(dist_eu, centers = 4)
pairs(Boston, col = km$cluster)
plot(1:k_max, twcss, type='b')
km <-kmeans(dist_eu, centers = 4)
pairs(Boston, col = km$cluster)
km <-kmeans(dist_eu, centers = 2)
pairs(Boston, col = km$cluster)
lda.fit <- lda(clusters ~ ., data = km)
lda.fit <- lda(clusters$km ~ ., data = Boston)
lda.fit <- lda(cluster$km ~ ., data = Boston)
lda.fit <- lda(km$cluster ~ ., data = Boston)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 1)
plot(lda.fit, dimen = 1, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 1)
plot(lda.fit, dimen = 4, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 1)
plot(lda.fit, dimen = 4, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 4)
library(MASS)
data("Boston")
str(Boston)
library(GGally)
library(ggplot2)
library(tidyr)
library(dplyr)
gather(Boston) %>% glimpse
gather(Boston) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_histogram()
summary(Boston)
library(corrplot)
bos <- cor(Boston)
round(bos, 2)
corrplot(bos, type="upper", order="hclust",
p.mat = bos)
bostonZ <- scale(Boston)
summary(bostonZ)
bostonZ <- as.data.frame(bostonZ)
scaled_crim <- bostonZ$crim
bins <- quantile(scaled_crim)
crime <- cut(scaled_crim, breaks = bins, include.lowest = TRUE, label = c("low", "med_low", "med_high", "high"))
bostonZ <- dplyr::select(bostonZ, -crim)
bostonZ <- data.frame(bostonZ, crime)
n <- nrow(bostonZ)
ind <- sample(n,  size = n * 0.8)
train <- bostonZ[ind,]
test <- bostonZ[-ind,]
correct_classes <- test$crime
str(test)
test <- dplyr::select(test, -crime)
lda.fit <- lda(crime ~ ., data = train)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(train$crime)
plot(lda.fit, dimen = 3, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 1)
lda.pred <- predict(lda.fit, newdata = test)
table(correct = correct_classes, predicted = lda.pred$class)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 1)
data('Boston')
BostonScaled <- scale(Boston)
dist_eu <- dist(BostonScaled)
summary(dist_eu)
k_max <- 10
twcss <- sapply(1:k_max, function(k){kmeans(dist_eu, k)$tot.withinss})
plot(1:k_max, twcss, type='b')
km <-kmeans(dist_eu, centers = 2)
km2 <-kmeans(dist_eu, centers = 2)
pairs(Boston, col = km2$cluster)
km3 <-kmeans(dist_eu, centers = 3)
lda.fit <- lda(km3$cluster ~ ., data = Boston)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
plot(lda.fit, dimen = 3, col = classe
plot(lda.fit, dimen = 3, col = classes, pch = classes)
plot(lda.fit, dimen = 3, col = clusters, pch = clusters)
plot(lda.fit, dimen = 3, col = km3$cluster, pch = km3$cluster)
lda.arrows(lda.fit, myscale = 1)
km3 <-kmeans(dist_eu, centers = 4)
lda.fit <- lda(km3$cluster ~ ., data = Boston)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
plot(lda.fit, dimen = 3, col = km3$cluster, pch = km3$cluster)
lda.arrows(lda.fit, myscale = 1)
plot(lda.fit, dimen = 2, col = km3$cluster, pch = km3$cluster)
lda.arrows(lda.fit, myscale = 1)
km3 <-kmeans(dist_eu, centers = 3)
lda.fit <- lda(km3$cluster ~ ., data = Boston)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
plot(lda.fit, dimen = 2, col = km3
plot(lda.fit, dimen = 2, col = km3$cluster, pch = km3$cluster)
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
plot(lda.fit, dimen = 2, col = km3$cl
plot(lda.fit, dimen = 2, col = km3$cluster, pch = km3$cluster)
plot(lda.fit, dimen = 2, col = km3$cluster, pch = km3$cluster)
lda.arrows(lda.fit, myscale = 1)
data('Boston')
BostonScaled <- scale(Boston)
set.seed(123)
# euclidean distance matrix
dist_eu <- dist(BostonScaled)
summary(dist_eu)
# determine the maximum number of clusters
k_max <- 10
# calculate the total within sum of squares of each kmeans solution with a varying amount of clusters
twcss <- sapply(1:k_max, function(k){kmeans(dist_eu, k)$tot.withinss})
# visualize the results
plot(1:k_max, twcss, type='b')
# k-means clustering
km2 <-kmeans(dist_eu, centers = 2)
# plot the Boston dataset with clusters
pairs(Boston, col = km2$cluster)
km3 <-kmeans(dist_eu, centers = 3)
lda.fit <- lda(km3$cluster ~ ., data = Boston)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
plot(lda.fit, dimen = 2, col = km3$cluster, pch = km3$cluster)
lda.arrows(lda.fit, myscale = 1)
model_predictors <- dplyr::select(train, -crime)
dim(model_predictors)
dim(lda.fit$scaling)
matrix_product <- as.matrix(model_predictors) %*% lda.fit$scaling
class(model_predictors)
model_predictors <- as.matrix(model_predictors)
matrix_product <- model_predictors %*% lda.fit$scaling
class(lda.fit$scaling)
ldascaling <- lda.fit$scaling
matrix_product <- model_predictors %*% ldascaling
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
str(hd)
head(hd)
head(gii)
str(gii)
names(hd)
class(hd)
rename(hd, c("HDI.Rank"="rhdi", "Human.Development.Index..HDI."="hdi", "Expected.Years.of.Education"="edu", "Gross.National.Income..GNI..per.Capita"="GNI", "Country"="country", "Life.Expectancy.at.Birth"="lexp", "Mean.Years.of.Education"="eduyears", "Mean.Years.of.Education"="eduyears", "GNI.per.Capita.Rank.Minus.HDI.Rank"="gnihdi.ratio"))
rename(hd, c("HDI.Rank"="rhdi", "Human.Development.Index..HDI."="hdi", "Expected.Years.of.Education"="edu", "Gross.National.Income..GNI..per.Capita"="GNI", "Country"="country", "Life.Expectancy.at.Birth"="lexp", "Mean.Years.of.Education"="eduyears", "Mean.Years.of.Education"="eduyears", "GNI.per.Capita.Rank.Minus.HDI.Rank"="gnihdi.ratio"))
library(plyr)
rename(hd, c("HDI.Rank"="rhdi", "Human.Development.Index..HDI."="hdi", "Expected.Years.of.Education"="edu", "Gross.National.Income..GNI..per.Capita"="GNI", "Country"="country", "Life.Expectancy.at.Birth"="lexp", "Mean.Years.of.Education"="eduyears", "Mean.Years.of.Education"="eduyears", "GNI.per.Capita.Rank.Minus.HDI.Rank"="gnihdi.ratio"))
names(hd)
rename(hd, c("HDI.Rank"="rhdi", "Country"="countr", "Human.Development.Index..HDI."="hdi", "Life.Expectancy.at.Birth"="lifexp", "Expected.Years.of.Education"="eduexp", "Mean.Years.of.Education"="edumean", "Gross.National.Income..GNI..per.Capita"="gni", "GNI.per.Capita.Rank.Minus.HDI.Rank"="gnhd"))
names(hd)
rename(hd, c("HDI.Rank"="rhdi", "Country"="countr", "Human.Development.Index..HDI."="hdi", "Life.Expectancy.at.Birth"="lifexp", "Expected.Years.of.Education"="eduexp", "Mean.Years.of.Education"="edumean", "Gross.National.Income..GNI..per.Capita"="gni", "GNI.per.Capita.Rank.Minus.HDI.Rank"="gnhd"))
rename(hd, c("HDI.Rank"="rhdi", "Country"="countr", "Human.Development.Index..HDI."="hdi"))
names(hd)
library(plyr)
names(hd)
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
head(hd)
str(hd)
names(hd)
names(hd)[1] <- "hdi.rank"
names(hd)
names(hd)[1] <- "hdi.rank"
names(hd)[1] <- "hdi.rank"
names(hd)[2] <- "country"
names(hd)[3] <- "hdi"
names(hd)[4] <- "lifexp"
names(hd)[5] <- "eduexp"
names(hd)[6] <- "edumean"
names(hd)[7] <- "gni"
names(hd)[8] <- "gnhdR"
names(hd)
names(gii)
names(gii)[1] <- "gii.rank"
names(gii)[2] <- "country"
names(gii)[3] <- "gii"
names(gii)[4] <- "mortal"
names(gii)[5] <- "adole"
names(gii)[6] <- "parlia"
names(gii)[7] <- "eduF"
names(gii)[8] <- "eduM"
names(gii)[9] <- "workF"
names(gii)[10] <- "workM"
names(gii)
mutate(gii, eduFM_ratio = eduF / eduM)
str(gii)
library(dplyr)
mutate(gii, eduFM_ratio = eduF / eduM)
str(gii)
gii_new <- mutate(gii, eduFM_ratio = eduF / eduM)
str(gii_new)
gii <- mutate(gii, eduFM_ratio = eduF / eduM)
str(gii)
gii <- mutate(gii, eduFM_ratio = eduF / eduM, workFMratio = workF / workM)
str(gii)
human <- inner_join(hd, gii, by = join_by)
join_by <- "country"
human <- inner_join(hd, gii, by = join_by)
srt(human)
str(human)
str(hd)
setwd()
setwd("//home.org.aalto.fi/harjunv1/data/Desktop/GitHub/IODS_project/data")
write.table(human, "human.txt", sep="\t")
write.csv(human, file = "human.csv", sep = ",")
write.csv(human, file = "human.csv")
